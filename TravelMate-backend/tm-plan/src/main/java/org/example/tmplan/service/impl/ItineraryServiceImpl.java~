package org.example.tmplan.service.impl;

import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.example.tmplan.mapper.ItineraryMapper;
import org.example.tmplan.domain.po.Itinerary;
import org.example.tmplan.domain.dto.ItineraryDTO;
import org.example.tmplan.domain.vo.EventVo;
import org.example.tmplan.domain.vo.ItineraryVo;
import org.example.tmplan.service.EventService;
import org.example.tmplan.service.ItineraryService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * 行程服务实现类，实现行程的增删改查功能。
 * 同时负责整合事件信息与预算/支出模块。
 */
@Slf4j
@Service
public class ItineraryServiceImpl extends ServiceImpl<ItineraryMapper, Itinerary> implements ItineraryService {

    @Autowired
    private ItineraryMapper itineraryMapper;

    @Autowired
    private EventService eventService;

    /**
     * 添加新的行程
     *
     * @param itinerary 行程实体对象
     * @return 新增后的行程 ID，失败返回 null
     */
    public Integer addItinerary(Itinerary itinerary) {
        boolean isSaved = this.save(itinerary); // 插入行程数据
        if (isSaved) {
            return itinerary.getID(); // 返回自动生成的主键
        }
        return null;
    }

    /**
     * 根据用户 ID 查询其所有行程
     *
     * @param userID 用户 ID
     * @return 行程列表
     */
    public List<Itinerary> getItinerariesByUserID(Integer userID) {
        return itineraryMapper.findByUserID(userID);
    }

    /**
     * 根据行程 ID 获取完整行程信息（含事件列表）
     *
     * @param ID 行程 ID
     * @return 包含事件的行程视图对象
     */
    public ItineraryVo getItineraryByID(Integer ID) {
        Itinerary itinerary = this.getById(ID); // 查询基础行程信息
        ItineraryVo vo = new ItineraryVo();
        BeanUtils.copyProperties(itinerary, vo); // 拷贝基本字段
        vo.setEvents(eventService.findByItiID(ID)); // 设置事件列表
        return vo;
    }

    /**
     * 修改行程信息（仅更新不为空字段）
     *
     * @param itinerary 要修改的行程对象
     * @return 修改后的行程 ID，失败返回 null
     */
    public Integer modifyItinerary(Itinerary itinerary) {
        LambdaUpdateWrapper<Itinerary> updateWrapper = new LambdaUpdateWrapper<>();
        updateWrapper.eq(Itinerary::getID, itinerary.getID())
                .set(itinerary.getUserID() != null, Itinerary::getUserID, itinerary.getUserID())
                .set(itinerary.getName() != null, Itinerary::getName, itinerary.getName())
                .set(itinerary.getStartDate() != null, Itinerary::getStartDate, itinerary.getStartDate())
                .set(itinerary.getEndDate() != null, Itinerary::getEndDate, itinerary.getEndDate())
                .set(itinerary.getLocation() != null, Itinerary::getLocation, itinerary.getLocation());

        int rows = itineraryMapper.update(null, updateWrapper);
        if (rows > 0) {
            log.info("行程ID为{}的记录更新成功", itinerary.getID());
            return itinerary.getID();
        }

        log.warn("行程ID为{}的记录更新失败", itinerary.getID());
        return null;
    }

    /**
     * 删除指定行程及其关联的所有事件
     *
     * @param id 行程 ID
     * @return 是否成功删除
     */
    @Override
    public boolean deleteItinerary(Integer id) {
        List<EventVo> events = eventService.findByItiID(id);
        if (events != null && !events.isEmpty()) {
            for (EventVo event : events) {
                boolean eventDeleted = eventService.deleteEvent(event.getID());
                if (!eventDeleted) {
                    log.warn("删除事件ID为{}时失败", event.getID());
                    return false;
                }
            }
        }

        boolean itineraryDeleted = this.removeById(id);
        if (itineraryDeleted) {
            log.info("行程ID为{}及其所有关联事件删除成功", id);
            return true;
        }

        log.warn("删除行程ID为{}时失败", id);
        return false;
    }

    /**
     * 获取某个行程的简要详情（用于前端显示）
     *
     * @param id 行程 ID
     * @return ItineraryDTO 简要信息对象
     */
    public ItineraryDTO getItineraryDetails(Integer id) {
        Itinerary itinerary = itineraryMapper.selectById(id);
        if (itinerary == null) {
            throw new RuntimeException("Itinerary not found for ID: " + id);
        }
        return new ItineraryDTO(itinerary.getStartDate(), itinerary.getEndDate(), itinerary.getLocation());
    }

    /**
     * 获取用户所有事件 ID（跨行程聚合）
     *
     * @param userID 用户 ID
     * @return 事件 ID 列表
     */
    public List<Integer> getEventByUserID(Integer userID) {
        List<Itinerary> itineraries = itineraryMapper.findByUserID(userID);
        List<Integer> eventIDs = new ArrayList<>();
        for (Itinerary itinerary : itineraries) {
            List<EventVo> events = eventService.findByItiID(itinerary.getID());
            for (EventVo event : events) {
                eventIDs.add(event.getID());
            }
        }
        return eventIDs;
    }
}
